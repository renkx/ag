user nginx;

#启动进程,通常设置成和cpu的数量相等
worker_processes  auto;

#配置Nginx worker进程最大打开文件数
worker_rlimit_nofile 65535;

#全局错误日志
error_log /var/log/nginx/error.log error;

#工作模式及连接数上限
events {
    #epoll是多路复用IO(I/O Multiplexing)中的一种方式,
    #仅用于linux2.6以上内核,可以大大提高nginx的性能
    use epoll;
    # 事件驱动模块 use epoll时配置
    #epoll_events 1024; # 默认值为 512，即每次事件循环最多处理 512 个事件。
    #epoll_event_connections 2048; # 默认值为 2048，即每个事件最多处理 2048 个连接。
    #epoll_timeout 0; # 默认值为 0，即 epoll 模块不会超时，等待事件的时间取决于操作系统。
    #单个后台worker process进程的最大并发链接数
    worker_connections  65535;
}

http {
    #设定mime类型,类型由mime.type文件定义
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 隐藏版本号
    server_tokens off;

    # Specifies the maximum accepted body size of a client request, as
    # indicated by the request header Content-Length. If the stated content
    # length is greater than this size, then the client receives the HTTP
    # error code 413. Set to 0 to disable. Default is '1m'.
    # 设置NGINX能处理的最大请求主体大小。 如果请求大于指定的大小，则NGINX发回HTTP 413（Request Entity too large）错误。
    # 如果服务器处理大文件上传，则该指令非常重要
    client_max_body_size 5m;
    # 保存服务器名字的hash表是由指令 server_names_hash_max_size 和 server_names_hash_bucket_size所控制的
    server_names_hash_bucket_size 512;
    # client_header_buffer_size 为请求头分配一个缓冲区。 如果请求头大小大于指定的缓冲区，
    # 则使用large_client_header_buffers指令分配更大的缓冲区
    client_header_buffer_size 32k;
    # 规定了用于读取大型客户端请求头的缓冲区的最大数量和大小
    large_client_header_buffers 4 32k;

    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，
    #对于普通应用，必须设为 on,
    #如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，
    #以平衡磁盘与网络I/O处理速度，降低系统的uptime.
    sendfile        on;

    # Causes nginx to attempt to send its HTTP response head in one packet,
    # instead of using partial frames. Default is 'off'.
    #tcp_nopush on;

    # Enables the specified protocols. Default is TLSv1 TLSv1.1 TLSv1.2.
    # TIP: If you're not obligated to support ancient clients, remove TLSv1.1.
    ssl_protocols TLSv1.2 TLSv1.3;

    # Enables a shared SSL cache with size that can hold around 8000 sessions.
    # Default is 'none'.
    ssl_session_cache shared:SSL:2m;

    # Specifies a time during which a client may reuse the session parameters.
    # Default is '5m'.
    ssl_session_timeout 1h;

    # Disable TLS session tickets (they are insecure). Default is 'on'.
    ssl_session_tickets off;

    #设定日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
    			'$status $body_bytes_sent "$http_referer" '
    			'"$http_user_agent" "$http_x_forwarded_for"';

    # Sets the path, format, and configuration for a buffered log write.
    # access_log /var/log/nginx/access.log main;

    keepalive_timeout 75s;

    # 设置Nginx代理服务器从实际服务器接收到响应数据时的缓冲区的大小，默认是4k|8k（根据系统处理）
    # 简单理解：Nginx代理服务器时，在接收到实际服务器的响应时，它会在自身搞出个缓冲区去放置，而这个缓冲区的默认大小是4k或者8k.(后来查了下，我的接口请求的响应大小在28k,远远超出了这个上限)
    proxy_buffer_size 128k;
    proxy_buffers 32 64k;
    # nginx会在没有完全读完后端响应就开始向客户端传送数据，所以它会划出一部分busy状态的buffer来专门向客户端传送数据(建议为proxy_buffers中单个缓冲区的2倍)，然后它继续从后端取数据。
    proxy_busy_buffers_size 128k;

    #map指令的作用：
    #根据客户端请求中$http_upgrade 的值，来构造改变$connection_upgrade的值
    #即根据变量$http_upgrade的值创建新的变量$connection_upgrade，
    #创建的规则就是{}里面的东西。其中的规则没有做匹配，因此使用默认的.
    #即 $connection_upgrade 的值会一直是 upgrade。然后如果 $http_upgrade为空字符串的话，
    #那值会是 close。
    #进行特殊的配置才能支持websocket
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    # Includes virtual hosts configs.
	include /etc/nginx/conf.d/*-.conf;
}

# TIP: Uncomment if you use stream module.
#include /etc/nginx/stream.conf;
stream {
	# Specifies the main log format.
	log_format main '$remote_addr [$time_local] '
			'$protocol $status $bytes_sent $bytes_received '
			'$session_time "$upstream_addr" '
			'"$upstream_bytes_sent" "$upstream_bytes_received" "$upstream_connect_time" '
			'"$ssl_preread_server_name" "$ssl_preread_protocol" '
			'"$ssl_server_name" "$ssl_alpn_protocol" "$ssl_cipher" "$ssl_protocol" "$ssl_session_reused"';

	# access_log /var/log/nginx/stream.log main;

    # 当使用map模块的哈希表时，可以使用map_hash_bucket_size配置指定哈希表的桶大小
	map_hash_bucket_size 256;

    # 自定义stream模块配置
    include /etc/nginx/conf.d/*=.conf;
}
